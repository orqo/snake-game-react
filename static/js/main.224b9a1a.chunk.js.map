{"version":3,"sources":["Grid.js","lib/utils.js","App.js","reportWebVitals.js","index.js"],"names":["LinkedListNode","value","this","next","LinkedList","node","head","tail","Direction","Difficulty","startSnakeValues","grid","rowSize","length","colSize","startingRow","Math","round","startingCol","row","col","cell","createGrid","GRID_SIZE","cellCounter","currentRow","push","getDirectionCoords","coords","direction","isEatingItself","snakeCells","nextHeadCell","has","isOutOfBounds","getKeyPress","key","getGrowthNodeCoords","snakeTail","currDirection","tailNextNodeDirection","getNextNodeDirection","growthDirection","getOppositeDirection","currentTailCoords","currRow","currCol","nextRow","nextCol","getDifficulty","difficulty","getCellName","cellValue","foodCell","cellName","Grid","useState","score","setScore","highScore","setHighScore","snake","setSnake","Set","_setSnakeCells","snakeCellsRef","useRef","setSnakeCells","newSnakeCells","current","setFoodCell","_setDirection","directionRef","setDirection","newDirection","isRunning","setIsRunning","delay","setDelay","useEffect","window","addEventListener","e","handleKeydown","callback","savedCallback","id","setInterval","clearInterval","useInterval","moveSnake","size","currHeadCoords","nextHeadCoords","handleGameOver","newHead","currHead","delete","add","growSnake","handleFoodEaten","growthNodeCoords","newTailCell","newTail","currTail","nextFoodCell","min","max","floor","random","snakeValues","className","onClick","map","rowId","cellId","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.224b9a1a.chunk.js","sourcesContent":["import { useEffect, useState, useRef } from \"react\";\nimport { useInterval, randomIntFromInterval } from \"./lib/utils.js\";\nimport \"./Grid.css\";\n\nclass LinkedListNode {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nclass LinkedList {\n  constructor(value) {\n    const node = new LinkedListNode(value);\n    this.head = node;\n    this.tail = node;\n  }\n}\n\nconst Direction = {\n  UP: \"UP\",\n  RIGHT: \"RIGHT\",\n  DOWN: \"DOWN\",\n  LEFT: \"LEFT\",\n};\n\nconst GRID_SIZE = 10;\n\nconst Difficulty = {\n  EASY: 200,\n  MEDIUM: 150,\n  HARD: 100,\n};\n\nconst startSnakeValues = (grid) => {\n  const rowSize = grid.length;\n  const colSize = grid[0].length;\n  const startingRow = Math.round(rowSize / 2);\n  const startingCol = Math.round(colSize / 3);\n  const startingCell = grid[startingRow][startingCol];\n  return {\n    row: startingRow,\n    col: startingCol,\n    cell: startingCell,\n  };\n};\n\nconst Grid = () => {\n  const [grid, setGrid] = useState(createGrid(GRID_SIZE));\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  // starting food cell is always placed in the middle right of the grid\n  const [snake, setSnake] = useState(new LinkedList(startSnakeValues(grid)));\n\n  const [snakeCells, _setSnakeCells] = useState(\n    new Set([snake.head.value.cell])\n  );\n  const snakeCellsRef = useRef(snakeCells);\n  const setSnakeCells = (newSnakeCells) => {\n    snakeCellsRef.current = newSnakeCells;\n    _setSnakeCells(newSnakeCells);\n  };\n  // gets current reference of all snake cells\n\n  const [foodCell, setFoodCell] = useState(snake.head.value.cell + 4);\n\n  const [direction, _setDirection] = useState(Direction.RIGHT);\n  const directionRef = useRef(direction);\n  const setDirection = (newDirection) => {\n    directionRef.current = newDirection;\n    _setDirection(newDirection);\n  };\n  // gets current reference of direction\n\n  const [isRunning, setIsRunning] = useState(false);\n  const [delay, setDelay] = useState(Difficulty.EASY);\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", (e) => {\n      setIsRunning(true);\n      handleKeydown(e);\n    });\n  });\n\n  useInterval(\n    () => {\n      moveSnake();\n    },\n    isRunning ? delay : null\n  ); // speed of snake; lower is faster\n\n  const handleKeydown = (e) => {\n    const newDirection = getKeyPress(e.key);\n    // handles if key other than wasd is pressed\n    const isValidDirection = newDirection !== \"\";\n    if (!isValidDirection) return;\n    const snakeDoublesBack =\n      getOppositeDirection(newDirection) === directionRef.current &&\n      snakeCellsRef.current.size > 1;\n    // stops the snake from doubling back on itself\n    if (snakeDoublesBack) return;\n    setDirection(newDirection);\n  };\n\n  const moveSnake = () => {\n    const currHeadCoords = {\n      row: snake.head.value.row,\n      col: snake.head.value.col,\n    };\n\n    const nextHeadCoords = getDirectionCoords(currHeadCoords, direction);\n    if (isOutOfBounds(nextHeadCoords, grid)) {\n      handleGameOver();\n      return;\n    }\n\n    const nextHeadCell = grid[nextHeadCoords.row][nextHeadCoords.col];\n    if (isEatingItself(snakeCells, nextHeadCell)) {\n      handleGameOver();\n      return;\n    }\n\n    const newHead = new LinkedListNode({\n      row: nextHeadCoords.row,\n      col: nextHeadCoords.col,\n      cell: nextHeadCell,\n    });\n\n    const currHead = snake.head;\n    snake.head = newHead;\n    currHead.next = newHead;\n\n    const newSnakeCells = new Set(snakeCells);\n    newSnakeCells.delete(snake.tail.value.cell);\n    newSnakeCells.add(nextHeadCell);\n\n    snake.tail = snake.tail.next;\n    if (snake.tail === null) {\n      snake.tail = snake.head;\n    }\n\n    const foodEaten = nextHeadCell === foodCell;\n    if (foodEaten) {\n      growSnake(newSnakeCells);\n      handleFoodEaten(newSnakeCells);\n    }\n\n    setSnakeCells(newSnakeCells);\n  };\n\n  const growSnake = (newSnakeCells) => {\n    const growthNodeCoords = getGrowthNodeCoords(snake.tail, direction);\n    if (isOutOfBounds(growthNodeCoords, grid)) {\n      // if snake tail is at the edge and there is no space to grow, do nothing\n      return;\n    }\n    const newTailCell = grid[growthNodeCoords.row][growthNodeCoords.col];\n    const newTail = new LinkedListNode({\n      row: growthNodeCoords.row,\n      col: growthNodeCoords.col,\n      cell: newTailCell,\n    });\n    const currTail = snake.tail;\n    snake.tail = newTail;\n    snake.tail.next = currTail;\n\n    newSnakeCells.add(newTailCell);\n  };\n\n  const handleFoodEaten = (newSnakeCells) => {\n    const maxCellValue = GRID_SIZE * GRID_SIZE;\n    let nextFoodCell;\n\n    while (true) {\n      nextFoodCell = randomIntFromInterval(1, maxCellValue);\n      if (newSnakeCells.has(nextFoodCell) || foodCell === nextFoodCell)\n        continue;\n      break;\n    }\n\n    setFoodCell(nextFoodCell);\n    setScore(score + 1);\n    if (score >= highScore) {\n      setHighScore(score + 1);\n    }\n  };\n\n  const handleGameOver = () => {\n    setScore(0);\n    const snakeValues = startSnakeValues(grid);\n    setSnake(new LinkedList(snakeValues));\n    setFoodCell(snakeValues.cell + 4);\n    setSnakeCells(new Set([snakeValues.cell]));\n    setDirection(Direction.RIGHT);\n    setIsRunning(false);\n  };\n\n  return (\n    <>\n      <h1>High Score: {highScore}</h1>\n      <h1>Score: {score}</h1>\n      <div className=\"wrapper\">\n        <div className=\"instructions\">\n          <h2>Press any key to start the game</h2>\n          <h2>Use WASD to move</h2>\n          <h2>Choose a difficulty</h2>\n          <h2>Current difficulty: {getDifficulty(delay)}</h2>\n          <button onClick={() => setDelay(Difficulty.EASY)}>Easy</button>\n          <button onClick={() => setDelay(Difficulty.MEDIUM)}>Medium</button>\n          <button onClick={() => setDelay(Difficulty.HARD)}>Hard</button>\n        </div>\n        <div className=\"grid\">\n          {grid.map((row, rowId) => (\n            <div key={rowId} className=\"row\">\n              {row.map((cellValue, cellId) => {\n                const cellName = getCellName(cellValue, snakeCells, foodCell);\n                return <div key={cellId} className={cellName}></div>;\n              })}\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst createGrid = (GRID_SIZE) => {\n  let cellCounter = 1;\n  const grid = [];\n  for (let row = 0; row < GRID_SIZE; row++) {\n    const currentRow = [];\n    for (let col = 0; col < GRID_SIZE; col++) {\n      currentRow.push(cellCounter++);\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst getDirectionCoords = (coords, direction) => {\n  if (direction === Direction.UP) {\n    return {\n      row: coords.row - 1,\n      col: coords.col,\n    };\n  }\n  if (direction === Direction.RIGHT) {\n    return {\n      row: coords.row,\n      col: coords.col + 1,\n    };\n  }\n  if (direction === Direction.DOWN) {\n    return {\n      row: coords.row + 1,\n      col: coords.col,\n    };\n  }\n  if (direction === Direction.LEFT) {\n    return {\n      row: coords.row,\n      col: coords.col - 1,\n    };\n  }\n};\n\nconst isEatingItself = (snakeCells, nextHeadCell) => {\n  if (snakeCells.has(nextHeadCell)) return true;\n  return false;\n};\n\nconst isOutOfBounds = (coords, grid) => {\n  const { row, col } = coords;\n  if (row < 0 || col < 0) return true;\n  if (row >= grid.length || col >= grid[0].length) return true;\n  return false;\n};\n\nconst getKeyPress = (key) => {\n  if (key === \"w\") return Direction.UP;\n  if (key === \"d\") return Direction.RIGHT;\n  if (key === \"s\") return Direction.DOWN;\n  if (key === \"a\") return Direction.LEFT;\n  return \"\";\n};\n\nconst getGrowthNodeCoords = (snakeTail, currDirection) => {\n  const tailNextNodeDirection = getNextNodeDirection(snakeTail, currDirection);\n  const growthDirection = getOppositeDirection(tailNextNodeDirection);\n  const currentTailCoords = {\n    row: snakeTail.value.row,\n    col: snakeTail.value.col,\n  };\n  const growthNodeCoords = getDirectionCoords(\n    currentTailCoords,\n    growthDirection\n  );\n  return growthNodeCoords;\n};\n\nconst getNextNodeDirection = (node, currDirection) => {\n  if (node.next === null) return currDirection;\n  const { row: currRow, col: currCol } = node.value;\n  const { row: nextRow, col: nextCol } = node.next.value;\n  if (nextRow === currRow && nextCol === currCol + 1) {\n    return Direction.RIGHT;\n  }\n  if (nextRow === currRow && nextCol === currCol - 1) {\n    return Direction.LEFT;\n  }\n  if (nextCol === currCol && nextRow === currRow + 1) {\n    return Direction.DOWN;\n  }\n  if (nextCol === currCol && nextRow === currRow - 1) {\n    return Direction.UP;\n  }\n  return \"\";\n};\n\nconst getOppositeDirection = (direction) => {\n  if (direction === Direction.UP) return Direction.DOWN;\n  if (direction === Direction.RIGHT) return Direction.LEFT;\n  if (direction === Direction.DOWN) return Direction.UP;\n  if (direction === Direction.LEFT) return Direction.RIGHT;\n};\n\nconst getDifficulty = (difficulty) => {\n  if (difficulty === 200) return \"Easy\";\n  if (difficulty === 150) return \"Medium\";\n  if (difficulty === 100) return \"Hard\";\n};\n\n// function to check whether cell is a normal cell or not\nconst getCellName = (cellValue, snakeCells, foodCell) => {\n  let cellName = \"cell\";\n  if (cellValue === foodCell) cellName = \"cell food-cell\";\n  if (snakeCells.has(cellValue)) cellName = \"cell snake-cell\";\n  return cellName;\n};\n\nexport default Grid;\n","import { useEffect, useRef } from \"react\";\n\n// Copied from https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nexport function randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// Copied from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import \"./App.css\";\nimport Grid from \"./Grid.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}